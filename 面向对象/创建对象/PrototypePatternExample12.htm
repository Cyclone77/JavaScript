<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>

<body>
    <script>
        function Person() {}
        Person.prototype = {
            constructor: Person,
            name: "Nicholas",
            age: 29,
            job: "Software Engineer",
            friends: ["Shelby", "Court"],
            sayName: function() {
                console.log(this.name);
            }
        };
        var person1 = new Person();
        var person2 = new Person();
        person1.friends.push("Van");
        console.log(person1.friends); //"Shelby,Court,Van"
        console.log(person2.friends); //"Shelby,Court,Van"        
        console.log(person1.friends === person2.friends); //true
        /*
        在此， Person.prototype 对象有一个名为 friends 的属性，该属性包含一个字符串数组。然后，
创建了 Person 的两个实例。接着，修改了 person1.friends 引用的数组，向数组中添加了一个字符
串。由于 friends 数组存在于 Person.prototype 而非 person1 中，所以刚刚提到的修改也会通过
person2.friends（与 person1.friends 指向同一个数组）反映出来。假如我们的初衷就是像这样
在所有实例中共享一个数组，那么对这个结果我没有话可说。可是，实例一般都是要有属于自己的全部
属性的。而这个问题正是我们很少看到有人单独使用原型模式的原因所在。*/
        
        //修改 把特有的属性放在构造函数上
        function PersonNew(){
            this.name = "Nicholas";
            this.age = "29";
            this.friends = ["Shelby", "Court"];
        }
        PersonNew.prototype = {
            constructor: Person,
            sayName: function() {
                console.log(this.name);
            }
        };
        var person3 = new PersonNew();
        var person4 = new PersonNew();
        person3.friends.push("Van");
        console.log(person3.friends); //"Shelby,Court,Van"
        console.log(person4.friends); //"Shelby,Court"        
        console.log(person3.friends === person4.friends); //false
    </script>
</body>

</html>